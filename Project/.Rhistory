hoverinfo = 'text'
) %>%
# add_polygons(line = list(width = 0.4)) %>%
# add_polygons(
# fillcolor = 'transparent',
# line = list(color = 'black', width = 0.5),
# showlegend = FALSE,
# hoverinfo = 'none'
# ) %>%
add_annotations( text = testdat$Units.of.Measure[testdat$Parameter.Name == input$selectpara][1],
xref = "paper", yref = "paper",
x = 1.02, xanchor = "left",
y = 0.8, yanchor = "bottom",
legendtitle = TRUE, showarrow = FALSE ) %>%
layout(title = paste0(input$selectpara, " by County"),
legend=list(y=0.8, yanchor="top" ),
geo = geo)
p
#ggplotly(p)
})
# output$click <- renderPrint({
#   d <- event_data("plotly_relayout")
#   updateSliderInput(session, "slide", value = round(as.numeric(d))[1:2])
# });
})
};
shinyApp(ui, server, options = list(height=600));
ui <- fluidPage(
titlePanel("Air Data"),
sidebarPanel(
selectInput("selectyear",
label = "Select Year:",
choices = as.character(unique(testdat$Year)),
selected = "1999"),
selectInput("selectpara",
label = "Select Parameter:",
choices = unique(testdat$Parameter.Name),
selected = "Ambient Min Temperature")
),
mainPanel(
plotlyOutput("plot"),
verbatimTextOutput("click")
)
);
server <- function(input, output,session) {
output$plot <- renderPlotly({
output$plot <- renderPlotly({
geo <- list(
scope = 'usa',
showland = TRUE,
landcolor = toRGB("gray95"),
countrycolor = toRGB("gray80")
)
dat <- testdat %>%
filter(Year==input$selectyear) %>%
filter(Parameter.Name==input$selectpara)
county_data <- map_data("county")
para <- dat %>%
group_by(County.Name) %>%
summarise(Mean = mean(Arithmetic.Mean))
para$County.Name <- tolower(para$County.Name)
county_para <- merge(county_data, para, by.x = "subregion", by.y = "County.Name")
county_para$color <- cut(county_para$Mean,
breaks = seq(min(county_para$Mean),
max(county_para$Mean),
by = max(county_para$Mean) / 10)
)
p <- county_para %>%
group_by(group) %>%
plot_geo(
x = ~ long,
y = ~ lat,
color = ~ color,
colors = c('#ffeda0', '#f03b20'),
text = ~ subregion,
hoverinfo = 'text') %>%
add_polygons(line = list(width = 0.4)) %>%
add_polygons(
fillcolor = 'transparent',
line = list(color = 'grey', width = 0.5),
showlegend = FALSE,
hoverinfo = 'none') %>%
add_annotations( text = testdat$Units.of.Measure[testdat$Parameter.Name == input$selectpara][1],
xref = "paper", yref = "paper",
x = 1.02, xanchor = "left",
y = 0.8, yanchor = "bottom",
legendtitle = TRUE, showarrow = FALSE ) %>%
layout(title = paste0(input$selectpara, " by County"),
legend=list(y=0.8, yanchor="top" ),
geo = geo)
p
#ggplotly(p)
})
# output$click <- renderPrint({
#   d <- event_data("plotly_relayout")
#   updateSliderInput(session, "slide", value = round(as.numeric(d))[1:2])
# });
})
};
shinyApp(ui, server, options = list(height=600));
ui <- fluidPage(
titlePanel("Air Data"),
sidebarPanel(
selectInput("selectyear",
label = "Select Year:",
choices = as.character(unique(testdat$Year)),
selected = "1999"),
selectInput("selectpara",
label = "Select Parameter:",
choices = unique(testdat$Parameter.Name),
selected = "Ambient Min Temperature")
),
mainPanel(
plotlyOutput("plot"),
verbatimTextOutput("click")
)
);
server <- function(input, output,session) {
output$plot <- renderPlotly({
output$plot <- renderPlotly({
blank_layer <- list(
title = "",
showgrid = F,
showticklabels = F,
zeroline = F
)
geo <- list(
scope = 'usa',
showland = TRUE,
landcolor = toRGB("gray95"),
countrycolor = toRGB("gray80")
)
dat <- testdat %>%
filter(Year==input$selectyear) %>%
filter(Parameter.Name==input$selectpara)
county_data <- map_data("county")
para <- dat %>%
group_by(County.Name) %>%
summarise(Mean = mean(Arithmetic.Mean))
para$County.Name <- tolower(para$County.Name)
county_para <- merge(county_data, para, by.x = "subregion", by.y = "County.Name")
county_para$color <- cut(county_para$Mean,
breaks = seq(min(county_para$Mean),
max(county_para$Mean),
by = max(county_para$Mean) / 10)
)
p <- county_para %>%
group_by(group) %>%
plot_geo(
x = ~ long,
y = ~ lat,
color = ~ color,
colors = c('#ffeda0', '#f03b20'),
text = ~ subregion,
hoverinfo = 'text') %>%
add_polygons(line = list(width = 0.4)) %>%
add_polygons(
fillcolor = 'transparent',
line = list(color = 'grey', width = 0.5),
showlegend = FALSE,
hoverinfo = 'none') %>%
add_annotations( text = testdat$Units.of.Measure[testdat$Parameter.Name == input$selectpara][1],
xref = "paper", yref = "paper",
x = 1.02, xanchor = "left",
y = 0.8, yanchor = "bottom",
legendtitle = TRUE, showarrow = FALSE ) %>%
layout(title = paste0(input$selectpara, " by County"),
legend=list(y=0.8, yanchor="top" ),
geo = geo)
p
#ggplotly(p)
})
# output$click <- renderPrint({
#   d <- event_data("plotly_relayout")
#   updateSliderInput(session, "slide", value = round(as.numeric(d))[1:2])
# });
})
};
shinyApp(ui, server, options = list(height=600));
blank_layer <- list(
title = "",
showgrid = F,
showticklabels = F,
zeroline = F)
df <- read.csv("https://raw.githubusercontent.com/bcdunbar/datasets/master/californiaPopulation.csv")
cali <- map_data("county") %>%
filter(region == 'california')
pop <- df %>%
group_by(County.Name) %>%
summarise(Pop = sum(Population))
pop$County.Name <- tolower(pop$County.Name) # matching string
cali_pop <- merge(cali, pop, by.x = "subregion", by.y = "County.Name")
cali_pop$pop_cat <- cut(cali_pop$Pop, breaks = c(seq(0, 11000000, by = 500000)), labels=1:22)
geo <- list(
scope = 'usa',
showland = TRUE,
landcolor = toRGB("gray95"),
countrycolor = toRGB("gray80")
)
p <- cali_pop %>%
group_by(group) %>%
plot_geo(
x = ~long, y = ~lat, color = ~pop_cat, colors = c('#ffeda0','#f03b20'),
text = ~subregion, hoverinfo = 'text') %>%
add_polygons(line = list(width = 0.4)) %>%
add_polygons(
fillcolor = 'transparent',
line = list(color = 'black', width = 0.5),
showlegend = FALSE, hoverinfo = 'none'
) %>%
layout(
title = "California Population by County",
geo = geo)
p
# # Create a shareable link to your chart
# # Set up API credentials: https://plot.ly/r/getting-started
# chart_link = api_create(p, filename="county-level-geo")
# chart_link
p
cali_pop
str(cali_pop)
str(county_para)
View(cali_pop)
View(county_para)
ui <- fluidPage(
titlePanel("Air Data"),
sidebarPanel(
selectInput("selectyear",
label = "Select Year:",
choices = as.character(unique(testdat$Year)),
selected = "1999"),
selectInput("selectpara",
label = "Select Parameter:",
choices = unique(testdat$Parameter.Name),
selected = "Ambient Min Temperature")
),
mainPanel(
plotlyOutput("plot"),
verbatimTextOutput("click")
)
);
server <- function(input, output,session) {
output$plot <- renderPlotly({
output$plot <- renderPlotly({
blank_layer <- list(
title = "",
showgrid = F,
showticklabels = F,
zeroline = F
)
geo <- list(
scope = 'usa',
showland = TRUE,
landcolor = toRGB("gray95"),
countrycolor = toRGB("gray80")
)
dat <- testdat %>%
filter(Year==input$selectyear) %>%
filter(Parameter.Name==input$selectpara)
county_data <- map_data("county")
para <- dat %>%
group_by(County.Name) %>%
summarise(Mean = mean(Arithmetic.Mean))
para$County.Name <- tolower(para$County.Name)
county_para <- merge(county_data, para, by.x = "subregion", by.y = "County.Name")
county_para$color <- cut(county_para$Mean,
breaks = seq(min(county_para$Mean),
max(county_para$Mean),
by = max(county_para$Mean) / 10)
)
p <- county_para %>%
group_by(group) %>%
plot_geo(
x = ~ long,
y = ~ lat,
color = ~ color,
colors = c('#ffeda0', '#f03b20'),
text = ~ subregion,
hoverinfo = 'text') %>%
#add_polygons(line = list(width = 0.4)) %>%
add_polygons(
fillcolor = 'transparent',
line = list(color = 'grey', width = 0.5),
showlegend = FALSE,
hoverinfo = 'none') %>%
add_annotations( text = testdat$Units.of.Measure[testdat$Parameter.Name == input$selectpara][1],
xref = "paper", yref = "paper",
x = 1.02, xanchor = "left",
y = 0.8, yanchor = "bottom",
legendtitle = TRUE, showarrow = FALSE ) %>%
layout(title = paste0(input$selectpara, " by County"),
legend=list(y=0.8, yanchor="top" ),
geo = geo)
p
#ggplotly(p)
})
# output$click <- renderPrint({
#   d <- event_data("plotly_relayout")
#   updateSliderInput(session, "slide", value = round(as.numeric(d))[1:2])
# });
})
};
shinyApp(ui, server, options = list(height=600));
blank_layer <- list(
title = "",
showgrid = F,
showticklabels = F,
zeroline = F)
df <- read.csv("https://raw.githubusercontent.com/bcdunbar/datasets/master/californiaPopulation.csv")
cali <- map_data("county") %>%
filter(region == 'california')
pop <- df %>%
group_by(County.Name) %>%
summarise(Pop = sum(Population))
pop$County.Name <- tolower(pop$County.Name) # matching string
cali_pop <- merge(cali, pop, by.x = "subregion", by.y = "County.Name")
cali_pop$pop_cat <- cut(cali_pop$Pop, breaks = c(seq(0, 11000000, by = 500000)), labels=1:22)
geo <- list(
scope = 'usa',
showland = TRUE,
landcolor = toRGB("gray95"),
countrycolor = toRGB("gray80")
)
p <- cali_pop %>%
group_by(group) %>%
plot_geo(
x = ~long, y = ~lat, color = ~pop_cat, colors = c('#ffeda0','#f03b20'),
text = ~subregion, hoverinfo = 'text') %>%
# add_polygons(line = list(width = 0.4)) %>%
# add_polygons(
#   fillcolor = 'transparent',
#   line = list(color = 'black', width = 0.5),
#   showlegend = FALSE, hoverinfo = 'none'
# ) %>%
layout(
title = "California Population by County",
geo = geo)
p
# # Create a shareable link to your chart
# # Set up API credentials: https://plot.ly/r/getting-started
# chart_link = api_create(p, filename="county-level-geo")
# chart_link
p
blank_layer <- list(
title = "",
showgrid = F,
showticklabels = F,
zeroline = F)
df <- read.csv("https://raw.githubusercontent.com/bcdunbar/datasets/master/californiaPopulation.csv")
cali <- map_data("county") %>%
filter(region == 'california')
pop <- df %>%
group_by(County.Name) %>%
summarise(Pop = sum(Population))
pop$County.Name <- tolower(pop$County.Name) # matching string
cali_pop <- merge(cali, pop, by.x = "subregion", by.y = "County.Name")
cali_pop$pop_cat <- cut(cali_pop$Pop, breaks = c(seq(0, 11000000, by = 500000)), labels=1:22)
geo <- list(
scope = 'usa',
showland = TRUE,
landcolor = toRGB("gray95"),
countrycolor = toRGB("gray80")
)
p <- cali_pop %>%
group_by(group) %>%
plot_geo(
x = ~long, y = ~lat, color = ~pop_cat, colors = c('#ffeda0','#f03b20'),
text = ~subregion, hoverinfo = 'text') %>%
# add_polygons(line = list(width = 0.4)) %>%
add_polygons(
fillcolor = 'transparent',
line = list(color = 'black', width = 0.5),
showlegend = FALSE, hoverinfo = 'none'
) %>%
layout(
title = "California Population by County",
geo = geo)
p
# # Create a shareable link to your chart
# # Set up API credentials: https://plot.ly/r/getting-started
# chart_link = api_create(p, filename="county-level-geo")
# chart_link
p
blank_layer <- list(
title = "",
showgrid = F,
showticklabels = F,
zeroline = F)
df <- read.csv("https://raw.githubusercontent.com/bcdunbar/datasets/master/californiaPopulation.csv")
cali <- map_data("county") %>%
filter(region == 'california')
pop <- df %>%
group_by(County.Name) %>%
summarise(Pop = sum(Population))
pop$County.Name <- tolower(pop$County.Name) # matching string
cali_pop <- merge(cali, pop, by.x = "subregion", by.y = "County.Name")
cali_pop$pop_cat <- cut(cali_pop$Pop, breaks = c(seq(0, 11000000, by = 500000)), labels=1:22)
geo <- list(
scope = 'usa',
showland = TRUE,
landcolor = toRGB("gray95"),
countrycolor = toRGB("gray80")
)
p <- cali_pop %>%
group_by(group) %>%
plot_geo(
x = ~long, y = ~lat, color = ~pop_cat, colors = c('#ffeda0','#f03b20'),
text = ~subregion, hoverinfo = 'text') %>%
add_polygons(line = list(width = 0.4)) %>%
# add_polygons(
#   fillcolor = 'transparent',
#   line = list(color = 'black', width = 0.5),
#   showlegend = FALSE, hoverinfo = 'none'
# ) %>%
layout(
title = "California Population by County",
geo = geo)
p
# # Create a shareable link to your chart
# # Set up API credentials: https://plot.ly/r/getting-started
# chart_link = api_create(p, filename="county-level-geo")
# chart_link
p
str(county_para)
view(county_para)
View(county_para)
?order
order(county_para$order)
sort(county_para$order)
str(county_para %>% arrange(order()))
str(county_para %>% arrange(order)
)
ui <- fluidPage(
titlePanel("Air Data"),
sidebarPanel(
selectInput("selectyear",
label = "Select Year:",
choices = as.character(unique(testdat$Year)),
selected = "1999"),
selectInput("selectpara",
label = "Select Parameter:",
choices = unique(testdat$Parameter.Name),
selected = "Ambient Min Temperature")
),
mainPanel(
plotlyOutput("plot"),
verbatimTextOutput("click")
)
);
server <- function(input, output,session) {
output$plot <- renderPlotly({
output$plot <- renderPlotly({
blank_layer <- list(
title = "",
showgrid = F,
showticklabels = F,
zeroline = F
)
geo <- list(
scope = 'usa',
showland = TRUE,
landcolor = toRGB("gray95"),
countrycolor = toRGB("gray80")
)
dat <- testdat %>%
filter(Year==input$selectyear) %>%
filter(Parameter.Name==input$selectpara)
county_data <- map_data("county")
para <- dat %>%
group_by(County.Name) %>%
summarise(Mean = mean(Arithmetic.Mean))
para$County.Name <- tolower(para$County.Name)
county_para <- merge(county_data, para, by.x = "subregion", by.y = "County.Name")
county_para$color <- cut(county_para$Mean,
breaks = seq(min(county_para$Mean),
max(county_para$Mean),
by = max(county_para$Mean) / 10)
)
county_para <- county_para %>% arrange(order)
p <- county_para %>%
group_by(group) %>%
plot_geo(
x = ~ long,
y = ~ lat,
color = ~ color,
colors = c('#ffeda0', '#f03b20'),
text = ~ subregion,
hoverinfo = 'text') %>%
add_polygons(line = list(width = 0.4)) %>%
add_polygons(
fillcolor = 'transparent',
line = list(color = 'grey', width = 0.5),
showlegend = FALSE,
hoverinfo = 'none') %>%
add_annotations( text = testdat$Units.of.Measure[testdat$Parameter.Name == input$selectpara][1],
xref = "paper", yref = "paper",
x = 1.02, xanchor = "left",
y = 0.8, yanchor = "bottom",
legendtitle = TRUE, showarrow = FALSE ) %>%
layout(title = paste0(input$selectpara, " by County"),
legend=list(y=0.8, yanchor="top" ),
geo = geo)
p
#ggplotly(p)
})
# output$click <- renderPrint({
#   d <- event_data("plotly_relayout")
#   updateSliderInput(session, "slide", value = round(as.numeric(d))[1:2])
# });
})
};
shinyApp(ui, server, options = list(height=600));
